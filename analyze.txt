Name: Liam Ninger
Period: 2

When I first started taking the course, I wasn’t really sure what to expect. I knew I was going to start working with code and start to get an understanding of how computers understand the code, but besides that I was going in blind. What I didn’t expect was at the beginning of the year when we started working on Scratch because to me I didn’t really see that as coding. While I do understand why it was necessary to start with it, I disliked it cause scratch doesn’t really teach the code, it just shows the basics of how computers think. Besides that, the course has met my expectations. 
One program that I enjoyed coding was credit because it became a fun challenge that tested my knowledge from what I’ve learned prior to this. And when the check50 didn’t allow me to submit it the way I wanted, it was interesting to figure out how I could get the same thing accomplished with a totally different approach to the problem. One writing prompt I didn’t enjoy was the one where we had to talk about computers around the house. I disliked this prompt because I feel like because it was put at the beginning of the course, I didn’t really have a proper understanding of what the question was asking or how to properly respond to it. I ended up feeling like I wrote nonsense just to fill the word count requirement.
As a computer scientist, my coding habits have changed drastically, especially after utilizing all of the tools that are provided for me. When first starting, I didn’t know about why things needed to be spaced a certain way, or what most functions/commands worked, like %i in a printf statement, or how nested for loops worked. To debug, I would just use SO MANY printf statements, usually after each line in a for loop. This would end up screwing me over a few times because I would forget to delete them afterwards, so even if my code worked, check50 wouldn’t. Now that I use the IDE, I often just use debug50, which both saves time and also takes more time, but allows me to have a better understanding of what the computer is doing, why it’s doing it, and where the error is taking place. If I don’t have a strong understanding of what my code is doing wrong, I’ll look at code that has shown to work before and I’ll either the really tiny difference between my code and the reference code, or find the logical differences in the two codes and build off from there. I understand why spacing is so important too, and often try to correct my classmates when their spacing is off because to me it’s become weird to look at poor spacing. I understand that most of the time the computer starts counting at 0, but I haven’t drilled that concept into my head fully, and only get it right due to the habit of initializing variables at 0 instead of 1. The course hasn’t connected to any domains of interest outside of the class, except it’s made me consider double majoring in both psychology and computer science instead of just majoring in psychology.
I’ve learned the most about the fundamentals and learning new functions in coding through videos explaining what they do because the visuals that are added explaining how they work gives me a better understanding of what the computer is trying to do. Once I can envision what the computer itself needs to do, I have a better understanding of what I need to write in order for the computer to do what I want it to do.
One bad habit that I have that I hope I can break is that I need to learn that I can use while loops or do-while loops instead of just using for loops, because eventually that will make my code inefficient and cause more errors in the long run. One thing I want to learn is to get more comfortable with self made functions because that will make my code more efficient and a lot easier to read.
My biggest “a-ha!” moment was when I was working on credit. I first got credit to work by using argument vectors and using atoi to turn it into an integer, which worked perfectly. The only problem was that check50 didn’t acknowledge the fact that I used command line arguments to get the number, so I had to essentially redo almost all of my code because it only used that one variable. That’s when I remembered that on the ap.cs50.school website that ISBN and credit were next to each other, so I figured that they would have similar code. After making some tweaks to my ISBN, I managed to do a very complicated version of the original program. The program that took me one hour to code at first ended up taking a couple of days to figure out because the check50 didn’t like what I did. It was then that I started to understand how there can be so many different ways to tackle the problem but all of them could give the same result.
